{
  "address": "0x18E81c5Bb142A53D8B8fe309C7d2705177AEb53a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        }
      ],
      "name": "deployToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAddressOfUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d9b99b122dc8bf117eb01dc4c5c2e174512db7e974a296b33dffc967a028df1",
  "receipt": {
    "to": null,
    "from": "0xA2bbE509D55a7F5623fB8e820c5BC0B93dC57750",
    "contractAddress": "0x18E81c5Bb142A53D8B8fe309C7d2705177AEb53a",
    "transactionIndex": 0,
    "gasUsed": "111330484",
    "logsBloom": "0x
    "blockHash": "0xff28cf68c37aea14a7ffd322c9df13b61f80ee48972f973fe8e44c10eae5e4fa",
    "transactionHash": "0x6d9b99b122dc8bf117eb01dc4c5c2e174512db7e974a296b33dffc967a028df1",
    "logs": [],
    "blockNumber": 6075,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0ec04534a4951a36c0f129578e582015",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"deployToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddressOfUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFactory.sol\":\"TokenFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Token.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Token is ERC20 {\\n    address payable owner;\\n    uint8 tokenDiscountValue;\\n\\n    constructor(address payable _owner,string memory _tokenName,string memory _tokenSymbol) ERC20(_tokenName,_tokenSymbol) {\\n        owner = _owner;\\n        _mint(owner,1000*10**18);\\n    }\\n\\n    modifier onlyOwner {\\n        require(owner == msg.sender,\\\"Only owner allowed\\\");\\n        _;\\n    }\\n\\n    function transfer(address _to, uint256 _value) public virtual override onlyOwner returns(bool) {\\n        super.transfer(_to,_value);\\n    }\\n    function transferFrom(address _from, uint256 _value) public returns(bool) {\\n        super.transferFrom(_from,address(this),_value);\\n    }\\n    function setDiscountValue(uint8 _tokenDiscountValue) public onlyOwner{\\n        tokenDiscountValue = _tokenDiscountValue;\\n    }\\n    function getDiscountValue() public view returns (uint8) {\\n        return tokenDiscountValue;\\n    }\\n}\",\"keccak256\":\"0x6606386994a9a3e1058c27307d5f0ec63933d0a6706815c4cca8a2d53a9b92b3\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/TokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.12;\\n\\nimport './Token.sol';\\n\\ncontract TokenFactory {\\n    mapping (address => address) userToToken;\\n    function deployToken(string memory _tokenName, string memory _tokenSymbol) public returns (address) {\\n        require(msg.sender != address(0),\\\"Address 0 not allowed\\\");\\n        Token token= new Token(payable(msg.sender),_tokenName, _tokenSymbol);\\n        userToToken[msg.sender]= address(token);\\n        return address(token);\\n    }\\n    function getTokenAddressOfUser() public view returns (address) {\\n        require(userToToken[msg.sender] != address(0),\\\"User don't have any Token contract\\\");\\n        return userToToken[msg.sender];\\n    }\\n}\",\"keccak256\":\"0x6fc98e3163e6ff586c44cfbed5c1768d3e2b635e5c8ecec732cd343666289147\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612612806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200003a5760003560e01c80631d12b938146200003f578063f7dd94a91462000075575b600080fd5b6200005d60048036038101906200005791906200048b565b62000097565b6040516200006c919062000555565b60405180910390f35b6200007f620001d2565b6040516200008e919062000555565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036200010a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200010190620005d3565b60405180910390fd5b60003384846040516200011d9062000307565b6200012b9392919062000692565b604051809103906000f08015801562000148573d6000803e3d6000fd5b509050806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603620002a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200029a9062000753565b60405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611e67806200077683390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200037e8262000333565b810181811067ffffffffffffffff82111715620003a0576200039f62000344565b5b80604052505050565b6000620003b562000315565b9050620003c3828262000373565b919050565b600067ffffffffffffffff821115620003e657620003e562000344565b5b620003f18262000333565b9050602081019050919050565b82818337600083830152505050565b6000620004246200041e84620003c8565b620003a9565b9050828152602081018484840111156200044357620004426200032e565b5b62000450848285620003fe565b509392505050565b600082601f83011262000470576200046f62000329565b5b8135620004828482602086016200040d565b91505092915050565b60008060408385031215620004a557620004a46200031f565b5b600083013567ffffffffffffffff811115620004c657620004c562000324565b5b620004d48582860162000458565b925050602083013567ffffffffffffffff811115620004f857620004f762000324565b5b620005068582860162000458565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200053d8262000510565b9050919050565b6200054f8162000530565b82525050565b60006020820190506200056c600083018462000544565b92915050565b600082825260208201905092915050565b7f416464726573732030206e6f7420616c6c6f7765640000000000000000000000600082015250565b6000620005bb60158362000572565b9150620005c88262000583565b602082019050919050565b60006020820190508181036000830152620005ee81620005ac565b9050919050565b6000620006028262000510565b9050919050565b6200061481620005f5565b82525050565b600081519050919050565b60005b838110156200064557808201518184015260208101905062000628565b60008484015250505050565b60006200065e826200061a565b6200066a818562000572565b93506200067c81856020860162000625565b620006878162000333565b840191505092915050565b6000606082019050620006a9600083018662000609565b8181036020830152620006bd818562000651565b90508181036040830152620006d3818462000651565b9050949350505050565b7f5573657220646f6e2774206861766520616e7920546f6b656e20636f6e74726160008201527f6374000000000000000000000000000000000000000000000000000000000000602082015250565b60006200073b60228362000572565b91506200074882620006dd565b604082019050919050565b600060208201905081810360008301526200076e816200072c565b905091905056fe60806040523480156200001157600080fd5b5060405162001e6738038062001e67833981810160405281019062000037919062000455565b818181600390816200004a91906200073a565b5080600490816200005c91906200073a565b50505082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000dd600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16683635c9adc5dea00000620000e660201b60201c565b5050506200093c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000158576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014f9062000882565b60405180910390fd5b6200016c600083836200025360201b60201c565b8060026000828254620001809190620008d3565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200023391906200091f565b60405180910390a36200024f600083836200025860201b60201c565b5050565b505050565b505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200029e8262000271565b9050919050565b620002b08162000291565b8114620002bc57600080fd5b50565b600081519050620002d081620002a5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200032b82620002e0565b810181811067ffffffffffffffff821117156200034d576200034c620002f1565b5b80604052505050565b6000620003626200025d565b905062000370828262000320565b919050565b600067ffffffffffffffff821115620003935762000392620002f1565b5b6200039e82620002e0565b9050602081019050919050565b60005b83811015620003cb578082015181840152602081019050620003ae565b60008484015250505050565b6000620003ee620003e88462000375565b62000356565b9050828152602081018484840111156200040d576200040c620002db565b5b6200041a848285620003ab565b509392505050565b600082601f8301126200043a5762000439620002d6565b5b81516200044c848260208601620003d7565b91505092915050565b60008060006060848603121562000471576200047062000267565b5b60006200048186828701620002bf565b935050602084015167ffffffffffffffff811115620004a557620004a46200026c565b5b620004b38682870162000422565b925050604084015167ffffffffffffffff811115620004d757620004d66200026c565b5b620004e58682870162000422565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200054257607f821691505b602082108103620005585762000557620004fa565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005c27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000583565b620005ce868362000583565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200061b620006156200060f84620005e6565b620005f0565b620005e6565b9050919050565b6000819050919050565b6200063783620005fa565b6200064f620006468262000622565b84845462000590565b825550505050565b600090565b6200066662000657565b620006738184846200062c565b505050565b5b818110156200069b576200068f6000826200065c565b60018101905062000679565b5050565b601f821115620006ea57620006b4816200055e565b620006bf8462000573565b81016020851015620006cf578190505b620006e7620006de8562000573565b83018262000678565b50505b505050565b600082821c905092915050565b60006200070f60001984600802620006ef565b1980831691505092915050565b60006200072a8383620006fc565b9150826002028217905092915050565b6200074582620004ef565b67ffffffffffffffff811115620007615762000760620002f1565b5b6200076d825462000529565b6200077a8282856200069f565b600060209050601f831160018114620007b257600084156200079d578287015190505b620007a985826200071c565b86555062000819565b601f198416620007c2866200055e565b60005b82811015620007ec57848901518255600182019150602085019450602081019050620007c5565b868310156200080c578489015162000808601f891682620006fc565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006200086a601f8362000821565b9150620008778262000832565b602082019050919050565b600060208201905081810360008301526200089d816200085b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620008e082620005e6565b9150620008ed83620005e6565b9250828201905080821115620009085762000907620008a4565b5b92915050565b6200091981620005e6565b82525050565b60006020820190506200093660008301846200090e565b92915050565b61151b806200094c6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063469778301161008c5780639e6f3230116100665780639e6f323014610275578063a457c2d714610291578063a9059cbb146102c1578063dd62ed3e146102f1576100ea565b8063469778301461020957806370a082311461022757806395d89b4114610257576100ea565b806318160ddd116100c857806318160ddd1461016d57806323b872dd1461018b578063313ce567146101bb57806339509351146101d9576100ea565b806301c6adc3146100ef57806306fdde031461011f578063095ea7b31461013d575b600080fd5b61010960048036038101906101049190610d3c565b610321565b6040516101169190610d97565b60405180910390f35b610127610335565b6040516101349190610e42565b60405180910390f35b61015760048036038101906101529190610d3c565b6103c7565b6040516101649190610d97565b60405180910390f35b6101756103ea565b6040516101829190610e73565b60405180910390f35b6101a560048036038101906101a09190610e8e565b6103f4565b6040516101b29190610d97565b60405180910390f35b6101c3610423565b6040516101d09190610efd565b60405180910390f35b6101f360048036038101906101ee9190610d3c565b61042c565b6040516102009190610d97565b60405180910390f35b610211610463565b60405161021e9190610efd565b60405180910390f35b610241600480360381019061023c9190610f18565b61047a565b60405161024e9190610e73565b60405180910390f35b61025f6104c2565b60405161026c9190610e42565b60405180910390f35b61028f600480360381019061028a9190610f71565b610554565b005b6102ab60048036038101906102a69190610d3c565b610602565b6040516102b89190610d97565b60405180910390f35b6102db60048036038101906102d69190610d3c565b610679565b6040516102e89190610d97565b60405180910390f35b61030b60048036038101906103069190610f9e565b61071c565b6040516103189190610e73565b60405180910390f35b600061032e8330846103f4565b5092915050565b6060600380546103449061100d565b80601f01602080910402602001604051908101604052809291908181526020018280546103709061100d565b80156103bd5780601f10610392576101008083540402835291602001916103bd565b820191906000526020600020905b8154815290600101906020018083116103a057829003601f168201915b5050505050905090565b6000806103d26107a3565b90506103df8185856107ab565b600191505092915050565b6000600254905090565b6000806103ff6107a3565b905061040c858285610974565b610417858585610a00565b60019150509392505050565b60006012905090565b6000806104376107a3565b9050610458818585610449858961071c565b610453919061106d565b6107ab565b600191505092915050565b6000600560149054906101000a900460ff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546104d19061100d565b80601f01602080910402602001604051908101604052809291908181526020018280546104fd9061100d565b801561054a5780601f1061051f5761010080835404028352916020019161054a565b820191906000526020600020905b81548152906001019060200180831161052d57829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db906110ed565b60405180910390fd5b80600560146101000a81548160ff021916908360ff16021790555050565b60008061060d6107a3565b9050600061061b828661071c565b905083811015610660576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106579061117f565b60405180910390fd5b61066d82868684036107ab565b60019250505092915050565b60003373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461070b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610702906110ed565b60405180910390fd5b6107158383610c76565b5092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361081a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081190611211565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610889576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610880906112a3565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516109679190610e73565b60405180910390a3505050565b6000610980848461071c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109fa57818110156109ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e39061130f565b60405180910390fd5b6109f984848484036107ab565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a66906113a1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad590611433565b60405180910390fd5b610ae9838383610c99565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b66906114c5565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c5d9190610e73565b60405180910390a3610c70848484610c9e565b50505050565b600080610c816107a3565b9050610c8e818585610a00565b600191505092915050565b505050565b505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cd382610ca8565b9050919050565b610ce381610cc8565b8114610cee57600080fd5b50565b600081359050610d0081610cda565b92915050565b6000819050919050565b610d1981610d06565b8114610d2457600080fd5b50565b600081359050610d3681610d10565b92915050565b60008060408385031215610d5357610d52610ca3565b5b6000610d6185828601610cf1565b9250506020610d7285828601610d27565b9150509250929050565b60008115159050919050565b610d9181610d7c565b82525050565b6000602082019050610dac6000830184610d88565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610dec578082015181840152602081019050610dd1565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e1482610db2565b610e1e8185610dbd565b9350610e2e818560208601610dce565b610e3781610df8565b840191505092915050565b60006020820190508181036000830152610e5c8184610e09565b905092915050565b610e6d81610d06565b82525050565b6000602082019050610e886000830184610e64565b92915050565b600080600060608486031215610ea757610ea6610ca3565b5b6000610eb586828701610cf1565b9350506020610ec686828701610cf1565b9250506040610ed786828701610d27565b9150509250925092565b600060ff82169050919050565b610ef781610ee1565b82525050565b6000602082019050610f126000830184610eee565b92915050565b600060208284031215610f2e57610f2d610ca3565b5b6000610f3c84828501610cf1565b91505092915050565b610f4e81610ee1565b8114610f5957600080fd5b50565b600081359050610f6b81610f45565b92915050565b600060208284031215610f8757610f86610ca3565b5b6000610f9584828501610f5c565b91505092915050565b60008060408385031215610fb557610fb4610ca3565b5b6000610fc385828601610cf1565b9250506020610fd485828601610cf1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061102557607f821691505b60208210810361103857611037610fde565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061107882610d06565b915061108383610d06565b925082820190508082111561109b5761109a61103e565b5b92915050565b7f4f6e6c79206f776e657220616c6c6f7765640000000000000000000000000000600082015250565b60006110d7601283610dbd565b91506110e2826110a1565b602082019050919050565b60006020820190508181036000830152611106816110ca565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611169602583610dbd565b91506111748261110d565b604082019050919050565b600060208201905081810360008301526111988161115c565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006111fb602483610dbd565b91506112068261119f565b604082019050919050565b6000602082019050818103600083015261122a816111ee565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061128d602283610dbd565b915061129882611231565b604082019050919050565b600060208201905081810360008301526112bc81611280565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006112f9601d83610dbd565b9150611304826112c3565b602082019050919050565b60006020820190508181036000830152611328816112ec565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061138b602583610dbd565b91506113968261132f565b604082019050919050565b600060208201905081810360008301526113ba8161137e565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061141d602383610dbd565b9150611428826113c1565b604082019050919050565b6000602082019050818103600083015261144c81611410565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006114af602683610dbd565b91506114ba82611453565b604082019050919050565b600060208201905081810360008301526114de816114a2565b905091905056fea26469706673582212203527e98668f0004e04530c4205181a61b749063b7996a43042c308aec3517a0764736f6c63430008110033a2646970667358221220f395a52778443c9f427eb1de40c572f46a4a040532d35c606e4310169130fa9164736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200003a5760003560e01c80631d12b938146200003f578063f7dd94a91462000075575b600080fd5b6200005d60048036038101906200005791906200048b565b62000097565b6040516200006c919062000555565b60405180910390f35b6200007f620001d2565b6040516200008e919062000555565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036200010a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200010190620005d3565b60405180910390fd5b60003384846040516200011d9062000307565b6200012b9392919062000692565b604051809103906000f08015801562000148573d6000803e3d6000fd5b509050806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603620002a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200029a9062000753565b60405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611e67806200077683390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200037e8262000333565b810181811067ffffffffffffffff82111715620003a0576200039f62000344565b5b80604052505050565b6000620003b562000315565b9050620003c3828262000373565b919050565b600067ffffffffffffffff821115620003e657620003e562000344565b5b620003f18262000333565b9050602081019050919050565b82818337600083830152505050565b6000620004246200041e84620003c8565b620003a9565b9050828152602081018484840111156200044357620004426200032e565b5b62000450848285620003fe565b509392505050565b600082601f83011262000470576200046f62000329565b5b8135620004828482602086016200040d565b91505092915050565b60008060408385031215620004a557620004a46200031f565b5b600083013567ffffffffffffffff811115620004c657620004c562000324565b5b620004d48582860162000458565b925050602083013567ffffffffffffffff811115620004f857620004f762000324565b5b620005068582860162000458565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200053d8262000510565b9050919050565b6200054f8162000530565b82525050565b60006020820190506200056c600083018462000544565b92915050565b600082825260208201905092915050565b7f416464726573732030206e6f7420616c6c6f7765640000000000000000000000600082015250565b6000620005bb60158362000572565b9150620005c88262000583565b602082019050919050565b60006020820190508181036000830152620005ee81620005ac565b9050919050565b6000620006028262000510565b9050919050565b6200061481620005f5565b82525050565b600081519050919050565b60005b838110156200064557808201518184015260208101905062000628565b60008484015250505050565b60006200065e826200061a565b6200066a818562000572565b93506200067c81856020860162000625565b620006878162000333565b840191505092915050565b6000606082019050620006a9600083018662000609565b8181036020830152620006bd818562000651565b90508181036040830152620006d3818462000651565b9050949350505050565b7f5573657220646f6e2774206861766520616e7920546f6b656e20636f6e74726160008201527f6374000000000000000000000000000000000000000000000000000000000000602082015250565b60006200073b60228362000572565b91506200074882620006dd565b604082019050919050565b600060208201905081810360008301526200076e816200072c565b905091905056fe60806040523480156200001157600080fd5b5060405162001e6738038062001e67833981810160405281019062000037919062000455565b818181600390816200004a91906200073a565b5080600490816200005c91906200073a565b50505082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000dd600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16683635c9adc5dea00000620000e660201b60201c565b5050506200093c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000158576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014f9062000882565b60405180910390fd5b6200016c600083836200025360201b60201c565b8060026000828254620001809190620008d3565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200023391906200091f565b60405180910390a36200024f600083836200025860201b60201c565b5050565b505050565b505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200029e8262000271565b9050919050565b620002b08162000291565b8114620002bc57600080fd5b50565b600081519050620002d081620002a5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200032b82620002e0565b810181811067ffffffffffffffff821117156200034d576200034c620002f1565b5b80604052505050565b6000620003626200025d565b905062000370828262000320565b919050565b600067ffffffffffffffff821115620003935762000392620002f1565b5b6200039e82620002e0565b9050602081019050919050565b60005b83811015620003cb578082015181840152602081019050620003ae565b60008484015250505050565b6000620003ee620003e88462000375565b62000356565b9050828152602081018484840111156200040d576200040c620002db565b5b6200041a848285620003ab565b509392505050565b600082601f8301126200043a5762000439620002d6565b5b81516200044c848260208601620003d7565b91505092915050565b60008060006060848603121562000471576200047062000267565b5b60006200048186828701620002bf565b935050602084015167ffffffffffffffff811115620004a557620004a46200026c565b5b620004b38682870162000422565b925050604084015167ffffffffffffffff811115620004d757620004d66200026c565b5b620004e58682870162000422565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200054257607f821691505b602082108103620005585762000557620004fa565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005c27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000583565b620005ce868362000583565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200061b620006156200060f84620005e6565b620005f0565b620005e6565b9050919050565b6000819050919050565b6200063783620005fa565b6200064f620006468262000622565b84845462000590565b825550505050565b600090565b6200066662000657565b620006738184846200062c565b505050565b5b818110156200069b576200068f6000826200065c565b60018101905062000679565b5050565b601f821115620006ea57620006b4816200055e565b620006bf8462000573565b81016020851015620006cf578190505b620006e7620006de8562000573565b83018262000678565b50505b505050565b600082821c905092915050565b60006200070f60001984600802620006ef565b1980831691505092915050565b60006200072a8383620006fc565b9150826002028217905092915050565b6200074582620004ef565b67ffffffffffffffff811115620007615762000760620002f1565b5b6200076d825462000529565b6200077a8282856200069f565b600060209050601f831160018114620007b257600084156200079d578287015190505b620007a985826200071c565b86555062000819565b601f198416620007c2866200055e565b60005b82811015620007ec57848901518255600182019150602085019450602081019050620007c5565b868310156200080c578489015162000808601f891682620006fc565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006200086a601f8362000821565b9150620008778262000832565b602082019050919050565b600060208201905081810360008301526200089d816200085b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620008e082620005e6565b9150620008ed83620005e6565b9250828201905080821115620009085762000907620008a4565b5b92915050565b6200091981620005e6565b82525050565b60006020820190506200093660008301846200090e565b92915050565b61151b806200094c6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063469778301161008c5780639e6f3230116100665780639e6f323014610275578063a457c2d714610291578063a9059cbb146102c1578063dd62ed3e146102f1576100ea565b8063469778301461020957806370a082311461022757806395d89b4114610257576100ea565b806318160ddd116100c857806318160ddd1461016d57806323b872dd1461018b578063313ce567146101bb57806339509351146101d9576100ea565b806301c6adc3146100ef57806306fdde031461011f578063095ea7b31461013d575b600080fd5b61010960048036038101906101049190610d3c565b610321565b6040516101169190610d97565b60405180910390f35b610127610335565b6040516101349190610e42565b60405180910390f35b61015760048036038101906101529190610d3c565b6103c7565b6040516101649190610d97565b60405180910390f35b6101756103ea565b6040516101829190610e73565b60405180910390f35b6101a560048036038101906101a09190610e8e565b6103f4565b6040516101b29190610d97565b60405180910390f35b6101c3610423565b6040516101d09190610efd565b60405180910390f35b6101f360048036038101906101ee9190610d3c565b61042c565b6040516102009190610d97565b60405180910390f35b610211610463565b60405161021e9190610efd565b60405180910390f35b610241600480360381019061023c9190610f18565b61047a565b60405161024e9190610e73565b60405180910390f35b61025f6104c2565b60405161026c9190610e42565b60405180910390f35b61028f600480360381019061028a9190610f71565b610554565b005b6102ab60048036038101906102a69190610d3c565b610602565b6040516102b89190610d97565b60405180910390f35b6102db60048036038101906102d69190610d3c565b610679565b6040516102e89190610d97565b60405180910390f35b61030b60048036038101906103069190610f9e565b61071c565b6040516103189190610e73565b60405180910390f35b600061032e8330846103f4565b5092915050565b6060600380546103449061100d565b80601f01602080910402602001604051908101604052809291908181526020018280546103709061100d565b80156103bd5780601f10610392576101008083540402835291602001916103bd565b820191906000526020600020905b8154815290600101906020018083116103a057829003601f168201915b5050505050905090565b6000806103d26107a3565b90506103df8185856107ab565b600191505092915050565b6000600254905090565b6000806103ff6107a3565b905061040c858285610974565b610417858585610a00565b60019150509392505050565b60006012905090565b6000806104376107a3565b9050610458818585610449858961071c565b610453919061106d565b6107ab565b600191505092915050565b6000600560149054906101000a900460ff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546104d19061100d565b80601f01602080910402602001604051908101604052809291908181526020018280546104fd9061100d565b801561054a5780601f1061051f5761010080835404028352916020019161054a565b820191906000526020600020905b81548152906001019060200180831161052d57829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db906110ed565b60405180910390fd5b80600560146101000a81548160ff021916908360ff16021790555050565b60008061060d6107a3565b9050600061061b828661071c565b905083811015610660576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106579061117f565b60405180910390fd5b61066d82868684036107ab565b60019250505092915050565b60003373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461070b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610702906110ed565b60405180910390fd5b6107158383610c76565b5092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361081a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081190611211565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610889576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610880906112a3565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516109679190610e73565b60405180910390a3505050565b6000610980848461071c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109fa57818110156109ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e39061130f565b60405180910390fd5b6109f984848484036107ab565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a66906113a1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad590611433565b60405180910390fd5b610ae9838383610c99565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b66906114c5565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c5d9190610e73565b60405180910390a3610c70848484610c9e565b50505050565b600080610c816107a3565b9050610c8e818585610a00565b600191505092915050565b505050565b505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cd382610ca8565b9050919050565b610ce381610cc8565b8114610cee57600080fd5b50565b600081359050610d0081610cda565b92915050565b6000819050919050565b610d1981610d06565b8114610d2457600080fd5b50565b600081359050610d3681610d10565b92915050565b60008060408385031215610d5357610d52610ca3565b5b6000610d6185828601610cf1565b9250506020610d7285828601610d27565b9150509250929050565b60008115159050919050565b610d9181610d7c565b82525050565b6000602082019050610dac6000830184610d88565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610dec578082015181840152602081019050610dd1565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e1482610db2565b610e1e8185610dbd565b9350610e2e818560208601610dce565b610e3781610df8565b840191505092915050565b60006020820190508181036000830152610e5c8184610e09565b905092915050565b610e6d81610d06565b82525050565b6000602082019050610e886000830184610e64565b92915050565b600080600060608486031215610ea757610ea6610ca3565b5b6000610eb586828701610cf1565b9350506020610ec686828701610cf1565b9250506040610ed786828701610d27565b9150509250925092565b600060ff82169050919050565b610ef781610ee1565b82525050565b6000602082019050610f126000830184610eee565b92915050565b600060208284031215610f2e57610f2d610ca3565b5b6000610f3c84828501610cf1565b91505092915050565b610f4e81610ee1565b8114610f5957600080fd5b50565b600081359050610f6b81610f45565b92915050565b600060208284031215610f8757610f86610ca3565b5b6000610f9584828501610f5c565b91505092915050565b60008060408385031215610fb557610fb4610ca3565b5b6000610fc385828601610cf1565b9250506020610fd485828601610cf1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061102557607f821691505b60208210810361103857611037610fde565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061107882610d06565b915061108383610d06565b925082820190508082111561109b5761109a61103e565b5b92915050565b7f4f6e6c79206f776e657220616c6c6f7765640000000000000000000000000000600082015250565b60006110d7601283610dbd565b91506110e2826110a1565b602082019050919050565b60006020820190508181036000830152611106816110ca565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611169602583610dbd565b91506111748261110d565b604082019050919050565b600060208201905081810360008301526111988161115c565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006111fb602483610dbd565b91506112068261119f565b604082019050919050565b6000602082019050818103600083015261122a816111ee565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061128d602283610dbd565b915061129882611231565b604082019050919050565b600060208201905081810360008301526112bc81611280565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006112f9601d83610dbd565b9150611304826112c3565b602082019050919050565b60006020820190508181036000830152611328816112ec565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061138b602583610dbd565b91506113968261132f565b604082019050919050565b600060208201905081810360008301526113ba8161137e565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061141d602383610dbd565b9150611428826113c1565b604082019050919050565b6000602082019050818103600083015261144c81611410565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006114af602683610dbd565b91506114ba82611453565b604082019050919050565b600060208201905081810360008301526114de816114a2565b905091905056fea26469706673582212203527e98668f0004e04530c4205181a61b749063b7996a43042c308aec3517a0764736f6c63430008110033a2646970667358221220f395a52778443c9f427eb1de40c572f46a4a040532d35c606e4310169130fa9164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3595,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "userToToken",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}