{
  "address": "0x249d0d95c1997881cE296D9743acDc63d678EA14",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        }
      ],
      "name": "deployToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAddressOfUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userToToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f633256be1850bb41e3a86393dfcd1bdba05d13676bd9317e48cac8d424b757",
  "receipt": {
    "to": null,
    "from": "0xA2bbE509D55a7F5623fB8e820c5BC0B93dC57750",
    "contractAddress": "0x249d0d95c1997881cE296D9743acDc63d678EA14",
    "transactionIndex": 0,
    "gasUsed": "115778051",
    "logsBloom": "0x
    "blockHash": "0x54e547f91d8d5e9d1bb89cb4736814a6e40aa6e47770a8cbb964d90ce6a0a2dd",
    "transactionHash": "0x6f633256be1850bb41e3a86393dfcd1bdba05d13676bd9317e48cac8d424b757",
    "logs": [],
    "blockNumber": 8437,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "91c35326c131ccb1ef41a0a4a68fce2f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"deployToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddressOfUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFactory.sol\":\"TokenFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Token.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Token is ERC20 {\\n    address payable owner;\\n    uint8 tokenDiscountValue; // 1 token = 1% discount\\n\\n    constructor(address payable _owner,string memory _tokenName,string memory _tokenSymbol) ERC20(_tokenName,_tokenSymbol) {\\n        owner = _owner;\\n        _mint(owner,1000*10**18);\\n    }\\n\\n    modifier onlyOwner {\\n        require(owner == msg.sender,\\\"Only owner allowed\\\");\\n        _;\\n    }\\n\\n    function transfer(address _to, uint256 _value) public virtual override onlyOwner returns(bool) {\\n        return super.transfer(_to,_value);\\n    }\\n    function transferFrom(address _from, uint256 _value) public returns(bool) {\\n        return super.transferFrom(_from,address(this),_value);\\n    }\\n    function setDiscountValue(uint8 _tokenDiscountValue) public onlyOwner{\\n        tokenDiscountValue = _tokenDiscountValue;\\n    }\\n    function getDiscountValue() public view returns (uint8) {\\n        return tokenDiscountValue;\\n    }\\n}\",\"keccak256\":\"0x4f1b922fd98c6aac8fa3c3243b49eefab1b2a98926c6de0027ff8a344c283582\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/TokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.12;\\n\\nimport './Token.sol';\\n\\ncontract TokenFactory {\\n    mapping (address => address) public userToToken;\\n    function deployToken(string memory _tokenName, string memory _tokenSymbol) public returns (address) {\\n        require(msg.sender != address(0),\\\"Address 0 not allowed\\\");\\n        Token token= new Token(payable(msg.sender),_tokenName, _tokenSymbol);\\n        userToToken[msg.sender]= address(token);\\n        return address(token);\\n    }\\n    function getTokenAddressOfUser() public view returns (address) {\\n        require(userToToken[msg.sender] != address(0),\\\"User don't have any Token contract\\\");\\n        return userToToken[msg.sender];\\n    }\\n}\",\"keccak256\":\"0x600625ce73bdf2ffd3594098a86182e66ff754a7bfc9ab85e2f0634eb7233703\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506126ec806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c80631d12b938146200004b57806328d249fe1462000081578063f7dd94a914620000b7575b600080fd5b62000069600480360381019062000063919062000500565b620000d9565b604051620000789190620005ca565b60405180910390f35b6200009f600480360381019062000099919062000618565b62000214565b604051620000ae9190620005ca565b60405180910390f35b620000c162000247565b604051620000d09190620005ca565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036200014c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014390620006ab565b60405180910390fd5b60003384846040516200015f906200037c565b6200016d939291906200076a565b604051809103906000f0801580156200018a573d6000803e3d6000fd5b509050806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508091505092915050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000318576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200030f906200082b565b60405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611e69806200084e83390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003f382620003a8565b810181811067ffffffffffffffff82111715620004155762000414620003b9565b5b80604052505050565b60006200042a6200038a565b9050620004388282620003e8565b919050565b600067ffffffffffffffff8211156200045b576200045a620003b9565b5b6200046682620003a8565b9050602081019050919050565b82818337600083830152505050565b60006200049962000493846200043d565b6200041e565b905082815260208101848484011115620004b857620004b7620003a3565b5b620004c584828562000473565b509392505050565b600082601f830112620004e557620004e46200039e565b5b8135620004f784826020860162000482565b91505092915050565b600080604083850312156200051a576200051962000394565b5b600083013567ffffffffffffffff8111156200053b576200053a62000399565b5b6200054985828601620004cd565b925050602083013567ffffffffffffffff8111156200056d576200056c62000399565b5b6200057b85828601620004cd565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005b28262000585565b9050919050565b620005c481620005a5565b82525050565b6000602082019050620005e16000830184620005b9565b92915050565b620005f281620005a5565b8114620005fe57600080fd5b50565b6000813590506200061281620005e7565b92915050565b60006020828403121562000631576200063062000394565b5b6000620006418482850162000601565b91505092915050565b600082825260208201905092915050565b7f416464726573732030206e6f7420616c6c6f7765640000000000000000000000600082015250565b6000620006936015836200064a565b9150620006a0826200065b565b602082019050919050565b60006020820190508181036000830152620006c68162000684565b9050919050565b6000620006da8262000585565b9050919050565b620006ec81620006cd565b82525050565b600081519050919050565b60005b838110156200071d57808201518184015260208101905062000700565b60008484015250505050565b60006200073682620006f2565b6200074281856200064a565b935062000754818560208601620006fd565b6200075f81620003a8565b840191505092915050565b6000606082019050620007816000830186620006e1565b818103602083015262000795818562000729565b90508181036040830152620007ab818462000729565b9050949350505050565b7f5573657220646f6e2774206861766520616e7920546f6b656e20636f6e74726160008201527f6374000000000000000000000000000000000000000000000000000000000000602082015250565b6000620008136022836200064a565b91506200082082620007b5565b604082019050919050565b60006020820190508181036000830152620008468162000804565b905091905056fe60806040523480156200001157600080fd5b5060405162001e6938038062001e69833981810160405281019062000037919062000455565b818181600390816200004a91906200073a565b5080600490816200005c91906200073a565b50505082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000dd600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16683635c9adc5dea00000620000e660201b60201c565b5050506200093c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000158576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014f9062000882565b60405180910390fd5b6200016c600083836200025360201b60201c565b8060026000828254620001809190620008d3565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200023391906200091f565b60405180910390a36200024f600083836200025860201b60201c565b5050565b505050565b505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200029e8262000271565b9050919050565b620002b08162000291565b8114620002bc57600080fd5b50565b600081519050620002d081620002a5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200032b82620002e0565b810181811067ffffffffffffffff821117156200034d576200034c620002f1565b5b80604052505050565b6000620003626200025d565b905062000370828262000320565b919050565b600067ffffffffffffffff821115620003935762000392620002f1565b5b6200039e82620002e0565b9050602081019050919050565b60005b83811015620003cb578082015181840152602081019050620003ae565b60008484015250505050565b6000620003ee620003e88462000375565b62000356565b9050828152602081018484840111156200040d576200040c620002db565b5b6200041a848285620003ab565b509392505050565b600082601f8301126200043a5762000439620002d6565b5b81516200044c848260208601620003d7565b91505092915050565b60008060006060848603121562000471576200047062000267565b5b60006200048186828701620002bf565b935050602084015167ffffffffffffffff811115620004a557620004a46200026c565b5b620004b38682870162000422565b925050604084015167ffffffffffffffff811115620004d757620004d66200026c565b5b620004e58682870162000422565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200054257607f821691505b602082108103620005585762000557620004fa565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005c27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000583565b620005ce868362000583565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200061b620006156200060f84620005e6565b620005f0565b620005e6565b9050919050565b6000819050919050565b6200063783620005fa565b6200064f620006468262000622565b84845462000590565b825550505050565b600090565b6200066662000657565b620006738184846200062c565b505050565b5b818110156200069b576200068f6000826200065c565b60018101905062000679565b5050565b601f821115620006ea57620006b4816200055e565b620006bf8462000573565b81016020851015620006cf578190505b620006e7620006de8562000573565b83018262000678565b50505b505050565b600082821c905092915050565b60006200070f60001984600802620006ef565b1980831691505092915050565b60006200072a8383620006fc565b9150826002028217905092915050565b6200074582620004ef565b67ffffffffffffffff811115620007615762000760620002f1565b5b6200076d825462000529565b6200077a8282856200069f565b600060209050601f831160018114620007b257600084156200079d578287015190505b620007a985826200071c565b86555062000819565b601f198416620007c2866200055e565b60005b82811015620007ec57848901518255600182019150602085019450602081019050620007c5565b868310156200080c578489015162000808601f891682620006fc565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006200086a601f8362000821565b9150620008778262000832565b602082019050919050565b600060208201905081810360008301526200089d816200085b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620008e082620005e6565b9150620008ed83620005e6565b9250828201905080821115620009085762000907620008a4565b5b92915050565b6200091981620005e6565b82525050565b60006020820190506200093660008301846200090e565b92915050565b61151d806200094c6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063469778301161008c5780639e6f3230116100665780639e6f323014610275578063a457c2d714610291578063a9059cbb146102c1578063dd62ed3e146102f1576100ea565b8063469778301461020957806370a082311461022757806395d89b4114610257576100ea565b806318160ddd116100c857806318160ddd1461016d57806323b872dd1461018b578063313ce567146101bb57806339509351146101d9576100ea565b806301c6adc3146100ef57806306fdde031461011f578063095ea7b31461013d575b600080fd5b61010960048036038101906101049190610d3e565b610321565b6040516101169190610d99565b60405180910390f35b610127610336565b6040516101349190610e44565b60405180910390f35b61015760048036038101906101529190610d3e565b6103c8565b6040516101649190610d99565b60405180910390f35b6101756103eb565b6040516101829190610e75565b60405180910390f35b6101a560048036038101906101a09190610e90565b6103f5565b6040516101b29190610d99565b60405180910390f35b6101c3610424565b6040516101d09190610eff565b60405180910390f35b6101f360048036038101906101ee9190610d3e565b61042d565b6040516102009190610d99565b60405180910390f35b610211610464565b60405161021e9190610eff565b60405180910390f35b610241600480360381019061023c9190610f1a565b61047b565b60405161024e9190610e75565b60405180910390f35b61025f6104c3565b60405161026c9190610e44565b60405180910390f35b61028f600480360381019061028a9190610f73565b610555565b005b6102ab60048036038101906102a69190610d3e565b610603565b6040516102b89190610d99565b60405180910390f35b6102db60048036038101906102d69190610d3e565b61067a565b6040516102e89190610d99565b60405180910390f35b61030b60048036038101906103069190610fa0565b61071e565b6040516103189190610e75565b60405180910390f35b600061032e8330846103f5565b905092915050565b6060600380546103459061100f565b80601f01602080910402602001604051908101604052809291908181526020018280546103719061100f565b80156103be5780601f10610393576101008083540402835291602001916103be565b820191906000526020600020905b8154815290600101906020018083116103a157829003601f168201915b5050505050905090565b6000806103d36107a5565b90506103e08185856107ad565b600191505092915050565b6000600254905090565b6000806104006107a5565b905061040d858285610976565b610418858585610a02565b60019150509392505050565b60006012905090565b6000806104386107a5565b905061045981858561044a858961071e565b610454919061106f565b6107ad565b600191505092915050565b6000600560149054906101000a900460ff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546104d29061100f565b80601f01602080910402602001604051908101604052809291908181526020018280546104fe9061100f565b801561054b5780601f106105205761010080835404028352916020019161054b565b820191906000526020600020905b81548152906001019060200180831161052e57829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dc906110ef565b60405180910390fd5b80600560146101000a81548160ff021916908360ff16021790555050565b60008061060e6107a5565b9050600061061c828661071e565b905083811015610661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065890611181565b60405180910390fd5b61066e82868684036107ad565b60019250505092915050565b60003373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461070c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610703906110ef565b60405180910390fd5b6107168383610c78565b905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361081c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081390611213565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361088b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610882906112a5565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516109699190610e75565b60405180910390a3505050565b6000610982848461071e565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109fc57818110156109ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e590611311565b60405180910390fd5b6109fb84848484036107ad565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a68906113a3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad790611435565b60405180910390fd5b610aeb838383610c9b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b68906114c7565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c5f9190610e75565b60405180910390a3610c72848484610ca0565b50505050565b600080610c836107a5565b9050610c90818585610a02565b600191505092915050565b505050565b505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cd582610caa565b9050919050565b610ce581610cca565b8114610cf057600080fd5b50565b600081359050610d0281610cdc565b92915050565b6000819050919050565b610d1b81610d08565b8114610d2657600080fd5b50565b600081359050610d3881610d12565b92915050565b60008060408385031215610d5557610d54610ca5565b5b6000610d6385828601610cf3565b9250506020610d7485828601610d29565b9150509250929050565b60008115159050919050565b610d9381610d7e565b82525050565b6000602082019050610dae6000830184610d8a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610dee578082015181840152602081019050610dd3565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e1682610db4565b610e208185610dbf565b9350610e30818560208601610dd0565b610e3981610dfa565b840191505092915050565b60006020820190508181036000830152610e5e8184610e0b565b905092915050565b610e6f81610d08565b82525050565b6000602082019050610e8a6000830184610e66565b92915050565b600080600060608486031215610ea957610ea8610ca5565b5b6000610eb786828701610cf3565b9350506020610ec886828701610cf3565b9250506040610ed986828701610d29565b9150509250925092565b600060ff82169050919050565b610ef981610ee3565b82525050565b6000602082019050610f146000830184610ef0565b92915050565b600060208284031215610f3057610f2f610ca5565b5b6000610f3e84828501610cf3565b91505092915050565b610f5081610ee3565b8114610f5b57600080fd5b50565b600081359050610f6d81610f47565b92915050565b600060208284031215610f8957610f88610ca5565b5b6000610f9784828501610f5e565b91505092915050565b60008060408385031215610fb757610fb6610ca5565b5b6000610fc585828601610cf3565b9250506020610fd685828601610cf3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061102757607f821691505b60208210810361103a57611039610fe0565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061107a82610d08565b915061108583610d08565b925082820190508082111561109d5761109c611040565b5b92915050565b7f4f6e6c79206f776e657220616c6c6f7765640000000000000000000000000000600082015250565b60006110d9601283610dbf565b91506110e4826110a3565b602082019050919050565b60006020820190508181036000830152611108816110cc565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061116b602583610dbf565b91506111768261110f565b604082019050919050565b6000602082019050818103600083015261119a8161115e565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006111fd602483610dbf565b9150611208826111a1565b604082019050919050565b6000602082019050818103600083015261122c816111f0565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061128f602283610dbf565b915061129a82611233565b604082019050919050565b600060208201905081810360008301526112be81611282565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006112fb601d83610dbf565b9150611306826112c5565b602082019050919050565b6000602082019050818103600083015261132a816112ee565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061138d602583610dbf565b915061139882611331565b604082019050919050565b600060208201905081810360008301526113bc81611380565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061141f602383610dbf565b915061142a826113c3565b604082019050919050565b6000602082019050818103600083015261144e81611412565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006114b1602683610dbf565b91506114bc82611455565b604082019050919050565b600060208201905081810360008301526114e0816114a4565b905091905056fea2646970667358221220a64c94a00c873adcc9787051ae107d692e97767cd0669059a8fcc57b7d58e33e64736f6c63430008110033a2646970667358221220f62a367e746e79b163d21b0e205d0d73f921ee7f5f6e890bcfbb76947ac470c864736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c80631d12b938146200004b57806328d249fe1462000081578063f7dd94a914620000b7575b600080fd5b62000069600480360381019062000063919062000500565b620000d9565b604051620000789190620005ca565b60405180910390f35b6200009f600480360381019062000099919062000618565b62000214565b604051620000ae9190620005ca565b60405180910390f35b620000c162000247565b604051620000d09190620005ca565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036200014c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014390620006ab565b60405180910390fd5b60003384846040516200015f906200037c565b6200016d939291906200076a565b604051809103906000f0801580156200018a573d6000803e3d6000fd5b509050806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508091505092915050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000318576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200030f906200082b565b60405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611e69806200084e83390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003f382620003a8565b810181811067ffffffffffffffff82111715620004155762000414620003b9565b5b80604052505050565b60006200042a6200038a565b9050620004388282620003e8565b919050565b600067ffffffffffffffff8211156200045b576200045a620003b9565b5b6200046682620003a8565b9050602081019050919050565b82818337600083830152505050565b60006200049962000493846200043d565b6200041e565b905082815260208101848484011115620004b857620004b7620003a3565b5b620004c584828562000473565b509392505050565b600082601f830112620004e557620004e46200039e565b5b8135620004f784826020860162000482565b91505092915050565b600080604083850312156200051a576200051962000394565b5b600083013567ffffffffffffffff8111156200053b576200053a62000399565b5b6200054985828601620004cd565b925050602083013567ffffffffffffffff8111156200056d576200056c62000399565b5b6200057b85828601620004cd565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005b28262000585565b9050919050565b620005c481620005a5565b82525050565b6000602082019050620005e16000830184620005b9565b92915050565b620005f281620005a5565b8114620005fe57600080fd5b50565b6000813590506200061281620005e7565b92915050565b60006020828403121562000631576200063062000394565b5b6000620006418482850162000601565b91505092915050565b600082825260208201905092915050565b7f416464726573732030206e6f7420616c6c6f7765640000000000000000000000600082015250565b6000620006936015836200064a565b9150620006a0826200065b565b602082019050919050565b60006020820190508181036000830152620006c68162000684565b9050919050565b6000620006da8262000585565b9050919050565b620006ec81620006cd565b82525050565b600081519050919050565b60005b838110156200071d57808201518184015260208101905062000700565b60008484015250505050565b60006200073682620006f2565b6200074281856200064a565b935062000754818560208601620006fd565b6200075f81620003a8565b840191505092915050565b6000606082019050620007816000830186620006e1565b818103602083015262000795818562000729565b90508181036040830152620007ab818462000729565b9050949350505050565b7f5573657220646f6e2774206861766520616e7920546f6b656e20636f6e74726160008201527f6374000000000000000000000000000000000000000000000000000000000000602082015250565b6000620008136022836200064a565b91506200082082620007b5565b604082019050919050565b60006020820190508181036000830152620008468162000804565b905091905056fe60806040523480156200001157600080fd5b5060405162001e6938038062001e69833981810160405281019062000037919062000455565b818181600390816200004a91906200073a565b5080600490816200005c91906200073a565b50505082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000dd600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16683635c9adc5dea00000620000e660201b60201c565b5050506200093c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000158576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014f9062000882565b60405180910390fd5b6200016c600083836200025360201b60201c565b8060026000828254620001809190620008d3565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200023391906200091f565b60405180910390a36200024f600083836200025860201b60201c565b5050565b505050565b505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200029e8262000271565b9050919050565b620002b08162000291565b8114620002bc57600080fd5b50565b600081519050620002d081620002a5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200032b82620002e0565b810181811067ffffffffffffffff821117156200034d576200034c620002f1565b5b80604052505050565b6000620003626200025d565b905062000370828262000320565b919050565b600067ffffffffffffffff821115620003935762000392620002f1565b5b6200039e82620002e0565b9050602081019050919050565b60005b83811015620003cb578082015181840152602081019050620003ae565b60008484015250505050565b6000620003ee620003e88462000375565b62000356565b9050828152602081018484840111156200040d576200040c620002db565b5b6200041a848285620003ab565b509392505050565b600082601f8301126200043a5762000439620002d6565b5b81516200044c848260208601620003d7565b91505092915050565b60008060006060848603121562000471576200047062000267565b5b60006200048186828701620002bf565b935050602084015167ffffffffffffffff811115620004a557620004a46200026c565b5b620004b38682870162000422565b925050604084015167ffffffffffffffff811115620004d757620004d66200026c565b5b620004e58682870162000422565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200054257607f821691505b602082108103620005585762000557620004fa565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005c27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000583565b620005ce868362000583565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200061b620006156200060f84620005e6565b620005f0565b620005e6565b9050919050565b6000819050919050565b6200063783620005fa565b6200064f620006468262000622565b84845462000590565b825550505050565b600090565b6200066662000657565b620006738184846200062c565b505050565b5b818110156200069b576200068f6000826200065c565b60018101905062000679565b5050565b601f821115620006ea57620006b4816200055e565b620006bf8462000573565b81016020851015620006cf578190505b620006e7620006de8562000573565b83018262000678565b50505b505050565b600082821c905092915050565b60006200070f60001984600802620006ef565b1980831691505092915050565b60006200072a8383620006fc565b9150826002028217905092915050565b6200074582620004ef565b67ffffffffffffffff811115620007615762000760620002f1565b5b6200076d825462000529565b6200077a8282856200069f565b600060209050601f831160018114620007b257600084156200079d578287015190505b620007a985826200071c565b86555062000819565b601f198416620007c2866200055e565b60005b82811015620007ec57848901518255600182019150602085019450602081019050620007c5565b868310156200080c578489015162000808601f891682620006fc565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006200086a601f8362000821565b9150620008778262000832565b602082019050919050565b600060208201905081810360008301526200089d816200085b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620008e082620005e6565b9150620008ed83620005e6565b9250828201905080821115620009085762000907620008a4565b5b92915050565b6200091981620005e6565b82525050565b60006020820190506200093660008301846200090e565b92915050565b61151d806200094c6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063469778301161008c5780639e6f3230116100665780639e6f323014610275578063a457c2d714610291578063a9059cbb146102c1578063dd62ed3e146102f1576100ea565b8063469778301461020957806370a082311461022757806395d89b4114610257576100ea565b806318160ddd116100c857806318160ddd1461016d57806323b872dd1461018b578063313ce567146101bb57806339509351146101d9576100ea565b806301c6adc3146100ef57806306fdde031461011f578063095ea7b31461013d575b600080fd5b61010960048036038101906101049190610d3e565b610321565b6040516101169190610d99565b60405180910390f35b610127610336565b6040516101349190610e44565b60405180910390f35b61015760048036038101906101529190610d3e565b6103c8565b6040516101649190610d99565b60405180910390f35b6101756103eb565b6040516101829190610e75565b60405180910390f35b6101a560048036038101906101a09190610e90565b6103f5565b6040516101b29190610d99565b60405180910390f35b6101c3610424565b6040516101d09190610eff565b60405180910390f35b6101f360048036038101906101ee9190610d3e565b61042d565b6040516102009190610d99565b60405180910390f35b610211610464565b60405161021e9190610eff565b60405180910390f35b610241600480360381019061023c9190610f1a565b61047b565b60405161024e9190610e75565b60405180910390f35b61025f6104c3565b60405161026c9190610e44565b60405180910390f35b61028f600480360381019061028a9190610f73565b610555565b005b6102ab60048036038101906102a69190610d3e565b610603565b6040516102b89190610d99565b60405180910390f35b6102db60048036038101906102d69190610d3e565b61067a565b6040516102e89190610d99565b60405180910390f35b61030b60048036038101906103069190610fa0565b61071e565b6040516103189190610e75565b60405180910390f35b600061032e8330846103f5565b905092915050565b6060600380546103459061100f565b80601f01602080910402602001604051908101604052809291908181526020018280546103719061100f565b80156103be5780601f10610393576101008083540402835291602001916103be565b820191906000526020600020905b8154815290600101906020018083116103a157829003601f168201915b5050505050905090565b6000806103d36107a5565b90506103e08185856107ad565b600191505092915050565b6000600254905090565b6000806104006107a5565b905061040d858285610976565b610418858585610a02565b60019150509392505050565b60006012905090565b6000806104386107a5565b905061045981858561044a858961071e565b610454919061106f565b6107ad565b600191505092915050565b6000600560149054906101000a900460ff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546104d29061100f565b80601f01602080910402602001604051908101604052809291908181526020018280546104fe9061100f565b801561054b5780601f106105205761010080835404028352916020019161054b565b820191906000526020600020905b81548152906001019060200180831161052e57829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dc906110ef565b60405180910390fd5b80600560146101000a81548160ff021916908360ff16021790555050565b60008061060e6107a5565b9050600061061c828661071e565b905083811015610661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065890611181565b60405180910390fd5b61066e82868684036107ad565b60019250505092915050565b60003373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461070c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610703906110ef565b60405180910390fd5b6107168383610c78565b905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361081c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081390611213565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361088b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610882906112a5565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516109699190610e75565b60405180910390a3505050565b6000610982848461071e565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109fc57818110156109ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e590611311565b60405180910390fd5b6109fb84848484036107ad565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a68906113a3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad790611435565b60405180910390fd5b610aeb838383610c9b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b68906114c7565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c5f9190610e75565b60405180910390a3610c72848484610ca0565b50505050565b600080610c836107a5565b9050610c90818585610a02565b600191505092915050565b505050565b505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cd582610caa565b9050919050565b610ce581610cca565b8114610cf057600080fd5b50565b600081359050610d0281610cdc565b92915050565b6000819050919050565b610d1b81610d08565b8114610d2657600080fd5b50565b600081359050610d3881610d12565b92915050565b60008060408385031215610d5557610d54610ca5565b5b6000610d6385828601610cf3565b9250506020610d7485828601610d29565b9150509250929050565b60008115159050919050565b610d9381610d7e565b82525050565b6000602082019050610dae6000830184610d8a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610dee578082015181840152602081019050610dd3565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e1682610db4565b610e208185610dbf565b9350610e30818560208601610dd0565b610e3981610dfa565b840191505092915050565b60006020820190508181036000830152610e5e8184610e0b565b905092915050565b610e6f81610d08565b82525050565b6000602082019050610e8a6000830184610e66565b92915050565b600080600060608486031215610ea957610ea8610ca5565b5b6000610eb786828701610cf3565b9350506020610ec886828701610cf3565b9250506040610ed986828701610d29565b9150509250925092565b600060ff82169050919050565b610ef981610ee3565b82525050565b6000602082019050610f146000830184610ef0565b92915050565b600060208284031215610f3057610f2f610ca5565b5b6000610f3e84828501610cf3565b91505092915050565b610f5081610ee3565b8114610f5b57600080fd5b50565b600081359050610f6d81610f47565b92915050565b600060208284031215610f8957610f88610ca5565b5b6000610f9784828501610f5e565b91505092915050565b60008060408385031215610fb757610fb6610ca5565b5b6000610fc585828601610cf3565b9250506020610fd685828601610cf3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061102757607f821691505b60208210810361103a57611039610fe0565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061107a82610d08565b915061108583610d08565b925082820190508082111561109d5761109c611040565b5b92915050565b7f4f6e6c79206f776e657220616c6c6f7765640000000000000000000000000000600082015250565b60006110d9601283610dbf565b91506110e4826110a3565b602082019050919050565b60006020820190508181036000830152611108816110cc565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061116b602583610dbf565b91506111768261110f565b604082019050919050565b6000602082019050818103600083015261119a8161115e565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006111fd602483610dbf565b9150611208826111a1565b604082019050919050565b6000602082019050818103600083015261122c816111f0565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061128f602283610dbf565b915061129a82611233565b604082019050919050565b600060208201905081810360008301526112be81611282565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006112fb601d83610dbf565b9150611306826112c5565b602082019050919050565b6000602082019050818103600083015261132a816112ee565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061138d602583610dbf565b915061139882611331565b604082019050919050565b600060208201905081810360008301526113bc81611380565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061141f602383610dbf565b915061142a826113c3565b604082019050919050565b6000602082019050818103600083015261144e81611412565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006114b1602683610dbf565b91506114bc82611455565b604082019050919050565b600060208201905081810360008301526114e0816114a4565b905091905056fea2646970667358221220a64c94a00c873adcc9787051ae107d692e97767cd0669059a8fcc57b7d58e33e64736f6c63430008110033a2646970667358221220f62a367e746e79b163d21b0e205d0d73f921ee7f5f6e890bcfbb76947ac470c864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3611,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "userToToken",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}